# Cline Rules for Antigua Tech Labs Landing Page

## Project Patterns

### Content Management
- Content is stored in JSON files in the `/content` directory
- Data loading utilities in `/src/lib/data.ts` handle content retrieval
- Always use the data loading utilities rather than importing JSON directly

### Component Structure
- Use Material UI as the primary component library
- Use Framer Motion for animations and transitions
- Client components should be marked with "use client" directive at the top
- Server components are the default and don't need special marking

### Styling Approach
- Prefer Material UI's prop-based styling through the `sx` prop for component-specific styling
- Use global CSS variables for theme properties and fundamental styling
- Follow the existing color scheme using CSS variables (--background, --foreground)
- Support both light and dark modes using CSS media queries and Material UI theme

### File Organization
- Page components go in the `/src/app` directory following Next.js App Router conventions
- Reusable components should be placed in `/src/components` (to be created)
- Utility functions should be placed in `/src/lib`
- Content files should be placed in `/content`

### Naming Conventions
- Use PascalCase for component files and function names
- Use camelCase for variables, props, and utility functions
- Use kebab-case for CSS class names and file names
- Use descriptive, semantic names that reflect purpose

## Development Workflow

### Local Development
- Use `npm run dev` to start the development server (with Turbopack for faster builds)
- Make changes incrementally and test in the browser
- Ensure responsive design works on various viewport sizes
- Use `./init.sh` for initial project setup

### Code Quality
- Follow TypeScript best practices with proper typing
- Use ESLint to maintain code quality standards
- Keep components focused on a single responsibility
- Document complex logic with comments

### Deployment
- Changes to the main branch automatically deploy via GitHub Actions
- Verify builds locally before pushing to main
- Check Vercel deployment logs if issues occur

## User Preferences

### Design Aesthetics
- Clean, modern interface with ample whitespace
- Consistent spacing and typography
- Professional appearance suitable for business customers
- Subtle animations that enhance rather than distract

### Content Tone
- Professional but approachable
- Clear and concise messaging
- Focus on benefits rather than technical details
- Action-oriented calls to action

## Technical Decisions

### Performance Considerations
- Use Next.js server components for content-heavy sections
- Optimize images and assets for fast loading
- Minimize client-side JavaScript where possible
- Implement code splitting for optimal bundle sizes

### Accessibility Standards
- Ensure all interactive elements are keyboard accessible
- Maintain proper contrast ratios for text
- Use semantic HTML elements
- Include proper ARIA attributes where needed

### Browser Support
- Target modern browsers with good CSS Variable support
- Ensure responsive design works across devices
- Test on Chrome, Firefox, Safari, and Edge

## Implementation Notes

### Theme Integration
- The project uses Material UI as the primary component library
- Material UI theme is configured with custom colors, typography, and breakpoints
- Global CSS variables provide fundamental styling properties
- Theme supports both light and dark modes with automatic system preference detection

### Content Loading
- Server components load content during rendering using utilities in data.ts
- This approach allows for easy content updates without code changes
- Future expansion could include connecting to a headless CMS

### Animation Strategy
- Framer Motion is used for animations
- AnimatePresence in providers.tsx enables page transition animations
- Use subtle animations that enhance user experience without being distracting
